---

name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

## We specify a concurrency group with automated cancellation. This means that
## other pushes on the same `github.ref` (eg. other pushes to the same pull
## request) cancel previous occurrences of the CI.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  nixos-helga:
    name: NixOS / Helga
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v5
      - name: Build (and deploy) Helga
        uses: ./.github/composites/build-and-deploy
        with:
          machineName: helga
          githubAccessToken: ${{ secrets.GITHUB_TOKEN }}
          deployPrivateKey: ${{ secrets.DEPLOY_HELGA_KEY }}

  nixos-siegfried:
    name: NixOS / Siegfried
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code.
        uses: actions/checkout@v5
      - name: Build (and deploy) Siegfried
        uses: ./.github/composites/build-and-deploy
        with:
          machineName: siegfried
          githubAccessToken: ${{ secrets.GITHUB_TOKEN }}
          deployPrivateKey: ${{ secrets.DEPLOY_SIEGFRIED_KEY }}

  nixos-orianne:
    name: NixOS / Orianne
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v5
        ## NOTE: Orianne is an ARM machine, but the GitHub runners are Intel
        ## machines. We therefore install the emulation binaries for QEMU and
        ## tell Nix to behave as an `aarch64-linux` machine.
      - name: Install emulation binaries for QEMU
        run: sudo apt-get update -y && sudo apt-get install -y qemu-user-static
      - name: Build (and deploy) Orianne
        uses: ./.github/composites/build-and-deploy
        with:
          machineName: orianne
          nixSystem: aarch64-linux
          githubAccessToken: ${{ secrets.GITHUB_TOKEN }}
          deployPrivateKey: ${{ secrets.DEPLOY_ORIANNE_KEY }}

  nixos-gromit:
    name: NixOS / Gromit (build only)
    runs-on: ubuntu-latest
    steps:
      - name: Free some extra space
        run: |
          echo 'Available storage before:'
          sudo df -h
          echo
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          echo 'Available storage after:'
          sudo df -h
          echo
      - name: Check out repository code
        uses: actions/checkout@v5
      - name: Build Gromit
        uses: ./.github/composites/build-and-deploy
        with:
          machineName: gromit
          githubAccessToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Remaining space
        run: |
          echo 'Available storage:'
          sudo df -h

  nixos-wallace:
    name: NixOS / Wallace (build only)
    runs-on: ubuntu-latest
    steps:
      - name: Free some extra space
        run: |
          echo 'Available storage before:'
          sudo df -h
          echo
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          echo 'Available storage after:'
          sudo df -h
          echo
      - name: Check out repository code
        uses: actions/checkout@v5
      - name: Build Wallace
        uses: ./.github/composites/build-and-deploy
        with:
          machineName: wallace
          githubAccessToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Remaining space
        run: |
          echo 'Available storage:'
          sudo df -h

  home-niols:
    name: Home / Niols
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code.
        uses: actions/checkout@v5
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            ## Access token to avoid triggering GitHub's rate limiting.
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: Build Home configuration “niols”
        shell: bash
        run: nix build .#homeConfigurations.niols.activationPackage --print-build-logs

  check-pre-commit:
    name: Check pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v5
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            substituters = https://cache.nixos.org https://nix-community.cachix.org https://dancelor.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= dancelor.cachix.org-1:Q2pAI0MA6jIccQQeT8JEsY+Wfwb/751zmoUHddZmDyY=
      - name: Run flake checks
        run: nix build .#checks.x86_64-linux.pre-commit --print-build-logs
